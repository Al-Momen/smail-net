############ PRD_CATEGORY #############
DELIMITER $$
drop trigger if exists BEFORE_PRD_CATEGORY_INSERT;
CREATE TRIGGER BEFORE_PRD_CATEGORY_INSERT
BEFORE INSERT ON PRD_CATEGORY FOR EACH ROW
BEGIN
declare PKCODE int(2) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_CATEGORY'
and table_schema = database();
	SET NEW.CODE = PKCODE+100 ;
END IF;
END$$

DELIMITER ;





############ SLS_CUSTOMER_ADDRESS_TYPE #############
DELIMITER $$
drop trigger if exists BEFORE_SLS_CUSTOMER_ADDRESS_TYPE_INSERT;
CREATE TRIGGER BEFORE_SLS_CUSTOMER_ADDRESS_TYPE_INSERT
BEFORE INSERT ON SLS_CUSTOMER_ADDRESS_TYPE FOR EACH ROW
BEGIN
declare PKCODE int(2) default 0;
select IFNULL(max(CODE),10) into PKCODE
		from SLS_CUSTOMER_ADDRESS_TYPE;
		SET NEW.CODE = PKCODE+1 ;

END$$

DELIMITER ;



############ PRD_SUB_CATEGORY #############
DELIMITER $$

	drop trigger if exists BEFORE_PRD_SUB_CATEGORY_INSERT;

		CREATE TRIGGER BEFORE_PRD_SUB_CATEGORY_INSERT
			BEFORE INSERT ON PRD_SUB_CATEGORY FOR EACH ROW
		BEGIN
			declare PKCODE int(4) default 0 ;
			declare CATEGORY_CODE int(4) default 0 ;

			select CODE into CATEGORY_CODE
				from PRD_CATEGORY
				where PK_NO = NEW.F_PRD_CATEGORY_NO ;

			select IFNULL(MAX(CODE),100) as counter into PKCODE
				from PRD_SUB_CATEGORY
				where F_PRD_CATEGORY_NO = NEW.F_PRD_CATEGORY_NO;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(CATEGORY_CODE,PKCODE+1) ;


END$$

DELIMITER ;



############# PRD_BRAND #############
DELIMITER $$

drop trigger if exists BEFORE_PRD_BRAND_INSERT;

BEFORE_PRD_BRAND_INSERT

CREATE TRIGGER BEFORE_PRD_BRAND_INSERT
BEFORE INSERT ON PRD_BRAND FOR EACH ROW
BEGIN
declare PKCODE varchar(20) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_BRAND'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END IF;
END$$

DELIMITER ;

############ PRD_MODEL #############
DELIMITER $$

	drop trigger if exists BEFORE_PRD_MODEL_INSERT;

		BEFORE_PRD_MODEL_INSERT

		CREATE TRIGGER BEFORE_PRD_MODEL_INSERT
			BEFORE INSERT ON PRD_MODEL FOR EACH ROW
		BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO;

			IF NEW.CODE IS NULL THEN

				select auto_increment into PKCODE
					from information_schema.tables
					where table_name = 'PRD_MODEL'
					and table_schema = database() ;
					SET NEW.CODE = PKCODE ;
					SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,PKCODE) ;
			ELSE
				SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;
			END IF;


END$$

DELIMITER ;


DELIMITER $$

	drop trigger if exists BEFORE_PRD_MODEL_UPDATE; 


		CREATE TRIGGER BEFORE_PRD_MODEL_UPDATE
			BEFORE UPDATE ON PRD_MODEL FOR EACH ROW
		BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


		END$$

DELIMITER ;


############# PRD_COLOR #############
DELIMITER $$

drop trigger if exists BEFORE_PRD_COLOR_INSERT;

BEFORE_PRD_COLOR

CREATE TRIGGER BEFORE_PRD_COLOR_INSERT
	BEFORE INSERT ON PRD_COLOR FOR EACH ROW
BEGIN
	declare PKCODE varchar(20) default 0;

	select IFNULL(max(CODE),0) into PKCODE
		from PRD_COLOR
		where F_BRAND = NEW.F_BRAND;
		SET NEW.CODE = PKCODE+1 ;

END$$

DELIMITER ;


############# PRD_SIZE #############
DELIMITER $$

drop trigger if exists BEFORE_PRD_SIZE;


CREATE TRIGGER BEFORE_PRD_SIZE_INSERT
	BEFORE INSERT ON PRD_SIZE FOR EACH ROW
BEGIN
	declare PKCODE varchar(20) default 0;

	select IFNULL(max(CODE),0) into PKCODE
		from PRD_SIZE
		where PRD_SIZE.F_BRAND_NO = NEW.F_BRAND_NO;
		SET NEW.CODE = PKCODE+1 ;

END$$

DELIMITER ;


############# PRD_VAT_CLASS #############
DELIMITER $$

drop trigger if exists BEFORE_PRD_VAT_CLASS;

BEFORE_PRD_VAT_CLASS

CREATE TRIGGER BEFORE_PRD_VAT_CLASS_INSERT
BEFORE INSERT ON PRD_VAT_CLASS FOR EACH ROW
BEGIN
declare PKCODE varchar(20) default 0;

IF NEW.CODE IS NULL THEN

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRD_VAT_CLASS'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END IF;
END$$

DELIMITER ;

############ PRD_MASTER_SETUP #############
DELIMITER $$

	drop trigger if exists BEFORE_PRD_MASTER_SETUP_INSERT;

		CREATE TRIGGER BEFORE_PRD_MASTER_SETUP_INSERT
			BEFORE INSERT ON PRD_MASTER_SETUP FOR EACH ROW
		BEGIN
			declare PKCODE int(5) default 0 ;
			declare COMPOSITE_CODE varchar(80) default null ;
			declare V_MKT_PREFIX varchar(50) default null;
			declare V_MKT_CODE int(4) default 0;

			select PRD_MODEL.COMPOSITE_CODE into V_MKT_PREFIX
				from PRD_MODEL 
				where PRD_MODEL.PK_NO = NEW.F_MODEL ;

			select IFNULL(max(MKT_CODE),100) into  V_MKT_CODE 
				from PRD_MASTER_SETUP 
				where F_MODEL = NEW.F_MODEL ;
			SET NEW.MKT_CODE = V_MKT_CODE+1 ;
			SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT(V_MKT_PREFIX,V_MKT_CODE+1) ;

			select PRD_SUB_CATEGORY.COMPOSITE_CODE into COMPOSITE_CODE
				from PRD_SUB_CATEGORY
				where PRD_SUB_CATEGORY.PK_NO = NEW.F_PRD_SUB_CATEGORY_ID ;

			select IFNULL(max(CODE),100) as counter into PKCODE
				from PRD_MASTER_SETUP
				where F_PRD_SUB_CATEGORY_ID = NEW.F_PRD_SUB_CATEGORY_ID ;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END$$

DELIMITER ;


####update triger
DELIMITER $$

	drop trigger if exists BEFORE_PRD_MASTER_SETUP_UPDATE;

		CREATE TRIGGER BEFORE_PRD_MASTER_SETUP_UPDATE
			BEFORE UPDATE ON PRD_MASTER_SETUP FOR EACH ROW
		BEGIN
			declare PKCODE int(5) default 0 ;
			declare COMPOSITE_CODE varchar(80) default null ;
			declare V_MKT_PREFIX varchar(50) default null;
			declare V_MKT_CODE int(4) default 0;

			select PRD_MODEL.COMPOSITE_CODE into V_MKT_PREFIX
				from PRD_MODEL 
				where PRD_MODEL.PK_NO = NEW.F_MODEL ;

			select IFNULL(max(MKT_CODE),100) into  V_MKT_CODE 
				from PRD_MASTER_SETUP 
				where F_MODEL = NEW.F_MODEL and PK_NO <> NEW.PK_NO ;
			SET NEW.MKT_CODE = V_MKT_CODE+1 ;
			SET NEW.MKT_ID_COMPOSITE_CODE_PREFIX = CONCAT(V_MKT_PREFIX,V_MKT_CODE+1) ;

			select PRD_SUB_CATEGORY.COMPOSITE_CODE into COMPOSITE_CODE
				from PRD_SUB_CATEGORY
				where PRD_SUB_CATEGORY.PK_NO = NEW.F_PRD_SUB_CATEGORY_ID ;

			select IFNULL(max(CODE),100) as counter into PKCODE
				from PRD_MASTER_SETUP
				where F_PRD_SUB_CATEGORY_ID = NEW.F_PRD_SUB_CATEGORY_ID and PK_NO <> NEW.PK_NO ;
			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(COMPOSITE_CODE,PKCODE+1) ;


END$$

DELIMITER ;



############ PRD_VARIANT_SETUP #############
DELIMITER $$

	drop trigger if exists BEFORE_PRD_VARIANT_SETUP_INSERT;

		CREATE TRIGGER BEFORE_PRD_VARIANT_SETUP_INSERT
			BEFORE INSERT ON PRD_VARIANT_SETUP FOR EACH ROW
		BEGIN
			declare PKCODE int(4) default 0 ;
			declare VARCOMPOSITE_CODE varchar(80) default null ;
			declare VAR_KEYWORD_SEARCH varchar(4000) default null ;
			declare VAR_NARRATION varchar(4000) default null ;

			declare IG_CODE int(4) default 0 ;
			declare IG_COMPOSITE_CODE varchar(80) default null ;

			select COMPOSITE_CODE, MKT_ID_COMPOSITE_CODE_PREFIX INTO VARCOMPOSITE_CODE, IG_COMPOSITE_CODE
				from PRD_MASTER_SETUP
				where PK_NO = NEW.F_PRD_MASTER_SETUP_NO ;

			select IFNULL(max(MKT_CODE),100) into IG_CODE
				from PRD_VARIANT_SETUP
				where F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO ;

			select IFNULL(max(CODE),100) into PKCODE
				from PRD_VARIANT_SETUP
				where F_PRD_MASTER_SETUP_NO = NEW.F_PRD_MASTER_SETUP_NO;

			SET NEW.CODE = PKCODE+1 ;
			SET NEW.COMPOSITE_CODE = CONCAT(VARCOMPOSITE_CODE,PKCODE+1) ;

			SET NEW.MKT_CODE = IG_CODE+1 ;
			SET NEW.MRK_ID_COMPOSITE_CODE = CONCAT(IG_COMPOSITE_CODE, IG_CODE+1) ;

			IF NEW.IS_BARCODE_BY_MFG = 0 THEN
				SET NEW.BARCODE = CONCAT(VARCOMPOSITE_CODE,PKCODE+1) ;
			END IF;




			SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
			SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR, ''), ' ', IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(NEW.PREFERRED_SHIPPING_METHOD,''), ' ', IFNULL(VAR_NARRATION,''));
			SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

			SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;


END$$

DELIMITER ;



############ PRD_VARIANT_SETUP UPDATE #############
DELIMITER $$

	drop trigger if exists BEFORE_PRD_VARIANT_SETUP_UPDATE;

		CREATE TRIGGER BEFORE_PRD_VARIANT_SETUP_UPDATE
			BEFORE UPDATE ON PRD_VARIANT_SETUP FOR EACH ROW
		BEGIN
			declare VAR_KEYWORD_SEARCH varchar(1000) default null ;
			declare VAR_NARRATION varchar(4000) default null ;

			SELECT fnStripTags(IFNULL(NEW.NARRATION,'')) INTO VAR_NARRATION;
			SET VAR_KEYWORD_SEARCH = CONCAT(NEW.VARIANT_NAME, ' ', IFNULL(NEW.VARIANT_CUSTOMS_NAME,''), ' ', IFNULL(NEW.SIZE_NAME, ''), ' ', IFNULL(NEW.COLOR, ''), ' ', IFNULL(NEW.MRK_ID_COMPOSITE_CODE,''), ' ', IFNULL(NEW.PREFERRED_SHIPPING_METHOD,''), ' ', IFNULL(VAR_NARRATION,''));
			SET VAR_KEYWORD_SEARCH = SUBSTRING(VAR_KEYWORD_SEARCH,1,3090);

			SET NEW.KEYWORD_SEARCH = VAR_KEYWORD_SEARCH ;
		 


		END$$

DELIMITER ;



############ PRD_SUB_CATEGORY #############
DELIMITER $$

	drop trigger if exists BEFORE_PRD_MODEL_INSERT;

		CREATE TRIGGER BEFORE_PRD_MODEL_INSERT
			BEFORE INSERT ON PRD_MODEL FOR EACH ROW
		BEGIN
			declare PKCODE varchar(20) default 0 ;
			declare BRAND_CODE varchar(20) default 0 ;

			select CODE into BRAND_CODE
				from PRD_BRAND
				where PK_NO = NEW.F_PRD_BRAND_NO ;

			SET NEW.COMPOSITE_CODE = CONCAT(BRAND_CODE,NEW.CODE) ;


END$$

DELIMITER ;


######## Vendor #######
DELIMITER $$

drop trigger if exists BEFORE_PRC_VENDORS_INSERT;

CREATE TRIGGER BEFORE_PRC_VENDORS_INSERT
BEFORE INSERT ON PRC_VENDORS FOR EACH ROW
BEGIN
declare PKCODE varchar(20) default 0;

select auto_increment into PKCODE
from information_schema.tables
where table_name = 'PRC_VENDORS'
and table_schema = database();
SET NEW.CODE = PKCODE ;
END$$

DELIMITER ;

######## Invoice #######PRC_STOCK_IN
DELIMITER $$

drop trigger if exists BEFORE_PRC_STOCK_IN_INSERT;

CREATE TRIGGER BEFORE_PRC_STOCK_IN_INSERT
BEFORE INSERT ON PRC_STOCK_IN FOR EACH ROW
BEGIN
declare PKCODE int(11) default 0;

select IFNULL(max(CODE),100) into PKCODE
from PRC_STOCK_IN;
SET NEW.CODE = PKCODE+1 ;
END$$

DELIMITER ;


######## PRC_STOCK_IN_DETAILS #######
DELIMITER $$

drop trigger if exists BEFORE_PRC_STOCK_IN_DETAILS_INSERT;

CREATE TRIGGER BEFORE_PRC_STOCK_IN_DETAILS_INSERT
BEFORE INSERT ON PRC_STOCK_IN_DETAILS FOR EACH ROW
BEGIN
	declare PARENT_CODE int(11) default 0;
	declare PKCODE varchar(20) default 0;
	declare VAR_RECIEVED_QTY int(11) default 0;
	declare VAR_TOTAL_QTY int(11) default 0;
	declare VAR_FAULTY_QTY int(11) default 0;
	declare VAR_LINE_TOTAL_VAT_MR FLOAT default 0;
	declare VAR_SUB_TOTAL_MR_EV FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_GBP FLOAT default 0;
	declare VAR_SUB_TOTAL_GBP_EV FLOAT default 0;
	declare VAR_LINE_TOTAL_VAT_AC FLOAT default 0;
	declare VAR_SUB_TOTAL_AC_EV FLOAT default 0;

	/*-----------FOR CODE---------------*/
	select CODE into PARENT_CODE
	from PRC_STOCK_IN
	where PK_NO = NEW.F_PRC_STOCK_IN ;

	select IFNULL(max(CODE),0) into PKCODE
	from PRC_STOCK_IN_DETAILS
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;

	IF PKCODE = 0 THEN
		SET NEW.CODE = CONCAT(PARENT_CODE,PKCODE+1) ;
	ELSE
		SET NEW.CODE = PKCODE+1 ;
	END IF;
	/*-----------END CODE---------------*/

	/*-----------FOR UPDATE PRC_STOCK_IN---------------*/
	select 
		IFNULL(SUM(RECIEVED_QTY),0) 
		,IFNULL(SUM(QTY),0) 
		,IFNULL(SUM(FAULTY_QTY),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_MR),0) 
		,IFNULL(SUM(SUB_TOTAL_MR_EV),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_GBP),0) 
		,IFNULL(SUM(SUB_TOTAL_GBP_EV),0) 
		,IFNULL(SUM(LINE_TOTAL_VAT_AC),0) 
		,IFNULL(SUM(SUB_TOTAL_AC_EV),0) 
	INTO 
		VAR_RECIEVED_QTY 
		,VAR_TOTAL_QTY
		,VAR_FAULTY_QTY
		,VAR_LINE_TOTAL_VAT_MR
		,VAR_SUB_TOTAL_MR_EV
		,VAR_LINE_TOTAL_VAT_GBP
		,VAR_SUB_TOTAL_GBP_EV
		,VAR_LINE_TOTAL_VAT_AC
		,VAR_SUB_TOTAL_AC_EV
	from PRC_STOCK_IN_DETAILS 
	where F_PRC_STOCK_IN = NEW.F_PRC_STOCK_IN ;
	
	UPDATE PRC_STOCK_IN
		SET 
			RECIEVED_QTY 					= VAR_RECIEVED_QTY+NEW.RECIEVED_QTY 
			,TOTAL_QTY 						= VAR_TOTAL_QTY+NEW.QTY
			,FAULTY_QTY 					= VAR_FAULTY_QTY+NEW.FAULTY_QTY
			
			,INVOICE_TOTAL_VAT_ACTUAL_RM 	= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR
			,INVOICE_TOTAL_EV_ACTUAL_RM 	= VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			,INVOICE_TOTAL_ACTUAL_RM 		= VAR_LINE_TOTAL_VAT_MR+NEW.LINE_TOTAL_VAT_MR+VAR_SUB_TOTAL_MR_EV+NEW.SUB_TOTAL_MR_EV
			
			,INVOICE_TOTAL_VAT_ACTUAL_GBP 	= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP
			,INVOICE_TOTAL_EV_ACTUAL_GBP 	= VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
			,INVOICE_TOTAL_ACTUAL_GBP 		= VAR_LINE_TOTAL_VAT_GBP+NEW.LINE_TOTAL_VAT_GBP+VAR_SUB_TOTAL_GBP_EV+NEW.SUB_TOTAL_GBP_EV
	
			,INVOICE_TOTAL_VAT_ACTUAL_AC 	= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC
			,INVOICE_TOTAL_EV_ACTUAL_AC 	= VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
			,INVOICE_TOTAL_ACTUAL_AC 		= VAR_LINE_TOTAL_VAT_AC+NEW.LINE_TOTAL_VAT_AC+VAR_SUB_TOTAL_AC_EV+NEW.SUB_TOTAL_AC_EV
	
	
	WHERE PK_NO = NEW.F_PRC_STOCK_IN;
	/*-----------END UPDATE PRC_STOCK_IN---------------*/


END$$

DELIMITER ;



############ ACC_PAYMENT_SOURCE #############
DELIMITER $$
drop trigger if exists BEFORE_ACC_PAYMENT_SOURCE;
CREATE TRIGGER BEFORE_ACC_PAYMENT_SOURCE
BEFORE INSERT ON ACC_PAYMENT_SOURCE FOR EACH ROW
BEGIN
declare PKCODE int(2) default 0;


select auto_increment into PKCODE
from information_schema.tables
where table_name = 'ACC_PAYMENT_SOURCE'
and table_schema = database();
	SET NEW.CODE = PKCODE+10 ;

END$$

DELIMITER ;



############ ACC_PAYMENT_METHODS #############
DELIMITER $$

	drop trigger if exists BEFORE_ACC_PAYMENT_METHODS_INSERT;

		CREATE TRIGGER BEFORE_ACC_PAYMENT_METHODS_INSERT
			BEFORE INSERT ON ACC_PAYMENT_METHODS FOR EACH ROW
		BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_PAYMENT_METHODS
				where F_ACC_SOURCE_NO = NEW.F_ACC_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END$$

DELIMITER ;


############ ACC_PAYMENT_METHODS #############
DELIMITER $$

	drop trigger if exists BEFORE_ACC_BANK_ACC_INSERT;

		CREATE TRIGGER BEFORE_ACC_BANK_ACC_INSERT
			BEFORE INSERT ON ACC_BANK_ACC FOR EACH ROW
		BEGIN
			declare PKCODE int(4) default 0 ;


			select IFNULL(MAX(CODE),100) into PKCODE
				from ACC_BANK_ACC
				where F_ACCOUNT_SOURCE_NO = NEW.F_ACCOUNT_SOURCE_NO;
			SET NEW.CODE = PKCODE+1 ;


END$$

DELIMITER ;

############ SLS_BOOKING #############
DELIMITER $$
drop trigger if exists BEFORE_SLS_BOOKING_INSERT;
CREATE TRIGGER BEFORE_SLS_BOOKING_INSERT
BEFORE INSERT ON SLS_BOOKING FOR EACH ROW
BEGIN
declare BOOKING_NO int(11) default 0;
select IFNULL(max(BOOKING_NO),100) into BOOKING_NO
		from SLS_BOOKING;
		SET NEW.BOOKING_NO = BOOKING_NO+1 ;

END$$

DELIMITER ;

############ SLS_AGENTS #############
DELIMITER $$
drop trigger if exists BEFORE_SLS_AGENTS_INSERT;
CREATE TRIGGER BEFORE_SLS_AGENTS_INSERT
BEFORE INSERT ON SLS_AGENTS FOR EACH ROW
BEGIN
declare PKCODE int(2) default 0;



select auto_increment into PKCODE
from information_schema.tables
where table_name = 'SLS_AGENTS'
and table_schema = database();
	SET NEW.CODE = PKCODE+10 ;

END$$

############ SLS_CUSTOMERS #############
DELIMITER $$
drop trigger if exists BEFORE_SLS_CUSTOMERS_INSERT;
CREATE TRIGGER BEFORE_SLS_CUSTOMERS_INSERT
BEFORE INSERT ON SLS_CUSTOMERS FOR EACH ROW
BEGIN
declare PKCODE int(11) default 0;



select IFNULL(max(CODE),100) into PKCODE
from SLS_CUSTOMERS;
	SET NEW.CODE = PKCODE+1 ;

END$$


############ SLS_CUSTOMERS_ADDRESS #############
DELIMITER $$
drop trigger if exists BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT;
CREATE TRIGGER BEFORE_SLS_CUSTOMERS_ADDRESS_INSERT
BEFORE INSERT ON SLS_CUSTOMERS_ADDRESS FOR EACH ROW
BEGIN
declare PKCODE int(11) default 0;
declare CUST_CODE int(11) default 0;


select IFNULL(max(CODE),1) into CUST_CODE
from SLS_CUSTOMERS 
where PK_NO = NEW.F_CUSTOMER_NO;

select IFNULL(max(CODE),1) into PKCODE
from SLS_CUSTOMERS_ADDRESS 
where F_CUSTOMER_NO = NEW.F_CUSTOMER_NO;

	SET NEW.CODE = CONCAT(CUST_CODE,PKCODE+1) ;

END$$



############ SLS_RESELLERS #############
DELIMITER $$
drop trigger if exists BEFORE_SLS_RESELLERS_INSERT;
CREATE TRIGGER BEFORE_SLS_RESELLERS_INSERT
BEFORE INSERT ON SLS_RESELLERS FOR EACH ROW
BEGIN
declare PKCODE int(11) default 0;



select IFNULL(max(CODE),100) into PKCODE
from SLS_RESELLERS;
	SET NEW.CODE = PKCODE+1 ;

END$$

############ SC_BOX #############
DELIMITER $$
drop trigger if exists BEFORE_SC_BOX_INSERT;
CREATE TRIGGER BEFORE_SC_BOX_INSERT
BEFORE INSERT ON SC_BOX FOR EACH ROW
BEGIN
declare PKCODE int(11) default 0;



select IFNULL(max(CODE),100000) into PKCODE
from SC_BOX;
	SET NEW.CODE = PKCODE+1 ;

END$$


########## INV_STOCK_PRC_STOCK_IN_MAP before insert #############
DELIMITER $$
drop trigger if exists BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT;

CREATE TRIGGER BEFORE_INV_STOCK_PRC_STOCK_IN_MAP_INSERT
  BEFORE INSERT
  ON INV_STOCK_PRC_STOCK_IN_MAP FOR EACH ROW
	
	BEGIN
		SET NEW.IS_PROCESS_COMPLETE = 0 ;
		SET NEW.PROCESS_START_TIME = NOW() ;

    END$$


########## INV_STOCK_PRC_STOCK_IN_MAP after insert #############

DELIMITER $$
drop trigger if exists AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT;

CREATE TRIGGER AFTER_INV_STOCK_PRC_STOCK_IN_MAP_INSERT
  AFTER INSERT
  ON INV_STOCK_PRC_STOCK_IN_MAP FOR EACH ROW
	
	BEGIN
		
		CALL  PROC_INV_STOCK_PRC_STOCK_IN_MAP(NEW.PK_NO); 
	    
	    UPDATE INV_STOCK_PRC_STOCK_IN_MAP
	    SET PROCESS_COMPLETE_TIME = NOW()
	    WHERE PK_NO=NEW.PK_NO; 
	    
	    UPDATE PRC_STOCK_IN 
	    SET INV_STOCK_RECORD_GENERATED = 1 
	    WHERE PK_NO = NEW.F_PRC_STOCK_IN_NO;      

	END$$


############ SC_SHIPMENT #############
DELIMITER $$
drop trigger if exists BEFORE_SC_SHIPMENT_INSERT;
CREATE TRIGGER BEFORE_SC_SHIPMENT_INSERT
BEFORE INSERT ON SC_SHIPMENT FOR EACH ROW
BEGIN
declare PKCODE int(11) default 0;
select IFNULL(max(CODE),100000) into PKCODE
		from SC_SHIPMENT;
		SET NEW.CODE = PKCODE+1 ;

END$$

DELIMITER ;




############ SC_BOX_INV_STOCK #############
DELIMITER $$
drop trigger if exists AFTER_SC_BOX_INV_STOCK_DELETE;
CREATE TRIGGER AFTER_SC_BOX_INV_STOCK_DELETE
AFTER DELETE ON SC_BOX_INV_STOCK FOR EACH ROW
BEGIN

		UPDATE SC_BOX 
		SET ITEM_COUNT = ITEM_COUNT-1 
		WHERE PK_NO = OLD.F_BOX_NO;

END$$

DELIMITER ;


############ SC_SHIPMENT_BOX #############
DELIMITER $$
drop trigger if exists AFTER_SC_SHIPMENT_BOX_INSERT;
CREATE TRIGGER AFTER_SC_SHIPMENT_BOX_INSERT
AFTER INSERT ON SC_SHIPMENT_BOX FOR EACH ROW
BEGIN

		UPDATE SC_SHIPMENT 
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT+1 
		WHERE PK_NO = NEW.F_SHIPMENT_NO;

END$$

DELIMITER ;

############ SC_SHIPMENT_BOX #############

DELIMITER $$
drop trigger if exists AFTER_SC_SHIPMENT_BOX_DELETE;
CREATE TRIGGER AFTER_SC_SHIPMENT_BOX_DELETE
AFTER DELETE ON SC_SHIPMENT_BOX FOR EACH ROW
BEGIN

		UPDATE SC_SHIPMENT 
		SET SENDER_BOX_COUNT = SENDER_BOX_COUNT-1 
		WHERE PK_NO = OLD.F_SHIPMENT_NO;

END$$

DELIMITER ;









########## Alter #########

ALTER TABLE `UKSHOP_DEV`.`PRD_VARIANT_SETUP`
CHANGE COLUMN `CODE` `CODE` INT(3) NULL DEFAULT NULL ,
CHANGE COLUMN `MKT_CODE` `MKT_CODE` INT(3) NULL DEFAULT NULL ;

ALTER TABLE `UKSHOP_DEV`.`PRD_MASTER_SETUP`
CHANGE COLUMN `CODE` `CODE` INT(4) NULL DEFAULT NULL ;

ALTER TABLE `UKSHOP_DEV`.`PRD_SUB_CATEGORY`
CHANGE COLUMN `CODE` `CODE` INT(4) NULL DEFAULT NULL ;

ALTER TABLE `UKSHOP_DEV`.`PRC_STOCK_IN` 
CHANGE COLUMN `CODE` `CODE` INT(11) NULL DEFAULT NULL ;

ALTER TABLE `UKSHOP_DEV`.`PRC_STOCK_IN_DETAILS` 
CHANGE COLUMN `CODE` `CODE` INT(10) NULL DEFAULT NULL ;

ALTER TABLE `UKSHOP_DEV`.`PRC_STOCK_IN` 
ADD `FAULTY_QTY` INT(11) NULL DEFAULT NULL AFTER `TOTAL_QTY`;

ALTER TABLE `UKSHOP_DEV`.`PRC_STOCK_IN` 
CHANGE COLUMN `IS_QUICK_BOOK_ENTERED` `IS_QUICK_BOOK_ENTERED` TINYINT NULL DEFAULT NULL;



ALTER TABLE `UKSHOP_DEV`.`PRC_STOCK_IN_DETAILS` 
CHANGE COLUMN `SUB_TOTAL_MR` `SUB_TOTAL_MR_RECEIPT` FLOAT NULL DEFAULT NULL ,
CHANGE COLUMN `SUB_TOTAL_MR_EV_ACTUAL` `SUB_TOTAL_MR_EV` FLOAT NULL DEFAULT NULL ,
CHANGE COLUMN `SUB_TOTAL_GBP` `SUB_TOTAL_GBP_RECEIPT` FLOAT NULL DEFAULT NULL ,
CHANGE COLUMN `SUB_TOTAL_GBP_EV_ACTUAL` `SUB_TOTAL_GBP_EV` FLOAT NULL DEFAULT NULL ,
CHANGE COLUMN `SUB_TOTAL_AC` `SUB_TOTAL_AC_RECEIPT` FLOAT NULL DEFAULT NULL ,
CHANGE COLUMN `SUB_TOTAL_AC_EV_ACTUAL` `SUB_TOTAL_AC_EV` FLOAT NULL DEFAULT NULL ;





############# common alter ##############
ALTER TABLE `PRD_BRAND` 	ADD `COMMENTS` VARCHAR(200) NULL DEFAULT NULL AFTER `NAME`,
							ADD `IS_ACTIVE` INT(1) NULL DEFAULT 1 AFTER `COMMENTS`,
 						   	ADD `ADD_COL_NUMBER_1` INT(4) NULL DEFAULT NULL AFTER `IS_ACTIVE`,
 						   	ADD `ADD_COL_NUMBER_2` INT(4) NULL DEFAULT NULL AFTER `ADD_COL_NUMBER_1`,
 						   	ADD `ADD_COL_VARCHAR_1` VARCHAR(10) NULL DEFAULT NULL AFTER `ADD_COL_NUMBER_2`,
 						   	ADD `ADD_COL_VARCHAR_2` VARCHAR(10) NULL DEFAULT NULL AFTER `ADD_COL_VARCHAR_1`,
 						   	ADD `F_SS_CREATED_BY` INT(4) NULL DEFAULT NULL AFTER `ADD_COL_VARCHAR_2`,
 						   	ADD `SS_CREATED_ON` DATETIME NULL DEFAULT NULL AFTER `F_SS_CREATED_BY`,
 						   	ADD `F_SS_MODIFIED_BY` INT(4) NULL DEFAULT NULL AFTER `SS_CREATED_ON`,
 						   	ADD `SS_MODIFIED_ON` DATETIME NULL DEFAULT NULL AFTER `F_SS_MODIFIED_BY`,
 						   	ADD `F_SS_COMPANY_NO` INT(4) NULL DEFAULT NULL AFTER `SS_MODIFIED_ON`;

